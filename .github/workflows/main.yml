name: build vischeck binaries
on:
  push:
    branches: [main]
  workflow_dispatch:
jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win64
          - os: ubuntu-latest
            platform: linux64
    runs-on: ${{ matrix.os }}
    steps:
      - name: checkout code
        uses: actions/checkout@v3
      
      - name: setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: install dependencies
        run: |
          pip install pybind11
          python -c "import pybind11; print('pybind11 version:', pybind11.__version__)"
          python -c "import pybind11; print('pybind11 include:', pybind11.get_include())"
      
      - name: setup build tools (Windows)
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.1
      
      - name: install build tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake g++
      
      - name: build everything (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          :: Setup Visual Studio environment
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64
          
          :: Get Python and pybind11 paths dynamically
          for /f "tokens=*" %%i in ('python -c "import sys; print(sys.executable)"') do set PYTHON_EXE=%%i
          for /f "tokens=*" %%i in ('python -c "import sys; print(sys.base_prefix)"') do set PYTHON_ROOT=%%i
          for /f "tokens=*" %%i in ('python -c "import pybind11; print(pybind11.get_include())"') do set PYBIND11_INCLUDE=%%i
          
          set PYTHON_INCLUDE=%PYTHON_ROOT%\include
          set PYTHON_LIB=%PYTHON_ROOT%\libs
          
          echo Python root: %PYTHON_ROOT%
          echo Python include: %PYTHON_INCLUDE%
          echo Python libs: %PYTHON_LIB%
          echo Pybind11 include: %PYBIND11_INCLUDE%
          
          :: Verify paths exist
          if not exist "%PYTHON_INCLUDE%" (
            echo ERROR: Python include directory not found: %PYTHON_INCLUDE%
            exit /b 1
          )
          if not exist "%PYTHON_LIB%" (
            echo ERROR: Python lib directory not found: %PYTHON_LIB%
            exit /b 1
          )
          if not exist "%PYBIND11_INCLUDE%" (
            echo ERROR: Pybind11 include directory not found: %PYBIND11_INCLUDE%
            exit /b 1
          )
          
          :: Build VPhysToOpt.exe
          echo Building VPhysToOpt.exe...
          msbuild VPhysToOpt.sln /p:Configuration=Release /p:Platform=x64
          if errorlevel 1 (
            echo ERROR: Failed to build VPhysToOpt.exe
            exit /b 1
          )
          
          :: Build vischeck.pyd
          echo Building vischeck.pyd...
          cd VisCheckCS2
          
          :: Check if source file exists
          if not exist "vischeck_module.cpp" (
            echo ERROR: vischeck_module.cpp not found in VisCheckCS2 directory
            dir
            exit /b 1
          )
          
           :: Compile the .pyd file with proper linking
           cl /LD ^
              /std:c++20 ^
              /EHsc ^
              /O2 ^
              /I "%PYTHON_INCLUDE%" ^
              /I "%PYBIND11_INCLUDE%" ^
              vischeck_module.cpp ^
              VisCheck.cpp ^
              OptimizedGeometry.cpp ^
              Parser.cpp ^
              /link ^
              /LIBPATH:"%PYTHON_LIB%" ^
              python310.lib ^
              /OUT:vischeck.pyd          
          if errorlevel 1 (
            echo ERROR: Failed to compile vischeck.pyd
            exit /b 1
          )
          
          :: Verify the .pyd was created
          if not exist "vischeck.pyd" (
            echo ERROR: vischeck.pyd was not created
            dir
            exit /b 1
          )
          
          echo Successfully built vischeck.pyd
          dir vischeck.pyd
          
          cd ..

      - name: build everything (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Get Python and pybind11 paths
          PYTHON_INCLUDE=$(python -c "import sysconfig; print(sysconfig.get_path('include'))")
          PYBIND11_INCLUDE=$(python -c "import pybind11; print(pybind11.get_include())")
          PYTHON_CONFIG_INCLUDE=$(python -c "import sysconfig; print(sysconfig.get_path('platinclude'))")
          PYTHON_LIB=$(python -c "import sysconfig; print(sysconfig.get_config_var('LIBDIR'))")
          PYTHON_VERSION=$(python -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
          
          echo "Python include: $PYTHON_INCLUDE"
          echo "Python config include: $PYTHON_CONFIG_INCLUDE" 
          echo "Pybind11 include: $PYBIND11_INCLUDE"
          echo "Python lib: $PYTHON_LIB"
          echo "Python version: $PYTHON_VERSION"
          
          # Build VPhysToOpt
          echo "Building VPhysToOpt..."
          g++ -std=c++20 -O2 -o VPhysToOpt \
            VPhysToOpt.cpp \
            Parser.cpp \
            OptimizedGeometry.cpp
          
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to build VPhysToOpt"
            exit 1
          fi
          
          # Build vischeck.so (Python module)
          echo "Building vischeck.so..."
          cd VisCheckCS2
          
          if [ ! -f "vischeck_module.cpp" ]; then
            echo "ERROR: vischeck_module.cpp not found in VisCheckCS2 directory"
            ls -la
            exit 1
          fi
          
          # Compile the .so file
          g++ -shared -fPIC \
            -std=c++20 \
            -O2 \
            -I"$PYTHON_INCLUDE" \
            -I"$PYTHON_CONFIG_INCLUDE" \
            -I"$PYBIND11_INCLUDE" \
            vischeck_module.cpp \
            VisCheck.cpp \
            OptimizedGeometry.cpp \
            Parser.cpp \
            -L"$PYTHON_LIB" \
            -lpython$PYTHON_VERSION \
            -o vischeck$(python-config --extension-suffix)
          
          if [ $? -ne 0 ]; then
            echo "ERROR: Failed to compile vischeck.so"
            exit 1
          fi
          
          # Verify the .so was created
          EXTENSION_SUFFIX=$(python-config --extension-suffix)
          if [ ! -f "vischeck$EXTENSION_SUFFIX" ]; then
            echo "ERROR: vischeck$EXTENSION_SUFFIX was not created"
            ls -la
            exit 1
          fi
          
          echo "Successfully built vischeck$EXTENSION_SUFFIX"
          ls -la vischeck$EXTENSION_SUFFIX
          
          cd ..
      
      - name: verify build outputs (Windows)
        if: matrix.os == 'windows-latest'
        shell: cmd
        run: |
          echo Checking build outputs...
          if exist "x64\Release\VPhysToOpt.exe" (
            echo ✓ VPhysToOpt.exe found
            dir "x64\Release\VPhysToOpt.exe"
          ) else (
            echo ✗ VPhysToOpt.exe not found
          )
          
          if exist "VisCheckCS2\vischeck.pyd" (
            echo ✓ vischeck.pyd found
            dir "VisCheckCS2\vischeck.pyd"
          ) else (
            echo ✗ vischeck.pyd not found
            echo Contents of VisCheckCS2 directory:
            dir VisCheckCS2
          )

      - name: verify build outputs (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Checking build outputs..."
          if [ -f "VPhysToOpt" ]; then
            echo "✓ VPhysToOpt found"
            ls -la VPhysToOpt
          else
            echo "✗ VPhysToOpt not found"
          fi
          
          cd VisCheckCS2
          EXTENSION_SUFFIX=$(python-config --extension-suffix)
          if [ -f "vischeck$EXTENSION_SUFFIX" ]; then
            echo "✓ vischeck$EXTENSION_SUFFIX found"
            ls -la "vischeck$EXTENSION_SUFFIX"
          else
            echo "✗ vischeck$EXTENSION_SUFFIX not found"
            echo "Contents of VisCheckCS2 directory:"
            ls -la
          fi
          cd ..
      
      - name: upload built binaries (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: vischeck-win64
          path: |
            x64/Release/VPhysToOpt.exe
            VisCheckCS2/vischeck.pyd

      - name: upload built binaries (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: vischeck-linux64
          path: |
            VPhysToOpt
            VisCheckCS2/vischeck*.so
